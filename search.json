[{"path":"https://drhealy013.github.io/turtle/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Darren Healy Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://drhealy013.github.io/turtle/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Darren Healy. Maintainer.","code":""},{"path":"https://drhealy013.github.io/turtle/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Healy D (2025). turtle: User-Friendly Pipelines Data Analysis. R package version 0.1.6, https://github.com/drhealy013/turtle.","code":"@Manual{,   title = {turtle: User-Friendly Pipelines for Data Analysis},   author = {Darren Healy},   year = {2025},   note = {R package version 0.1.6},   url = {https://github.com/drhealy013/turtle}, }"},{"path":"https://drhealy013.github.io/turtle/index.html","id":"turtle","dir":"","previous_headings":"","what":"User-Friendly Pipelines for Data Analysis","title":"User-Friendly Pipelines for Data Analysis","text":"turtle R package provides simplified, user-friendly functions common data analysis tasks modeling, dimensionality reduction, visualization. designed support users minimal programming experience allowing specify key inputs (e.g., outcome, exposure, covariates) automatically handle underlying code. applicable wide range data types, including epidemiological, ecological, experimental datasets.","code":""},{"path":"https://drhealy013.github.io/turtle/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"User-Friendly Pipelines for Data Analysis","text":"can install development version turtle GitHub :","code":"# install.packages(\"pak\") pak::pak(\"drhealy013/turtle\")"},{"path":"https://drhealy013.github.io/turtle/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"User-Friendly Pipelines for Data Analysis","text":"’s basic example using built-mtcars dataset:","code":"library(turtle)  result <- run_linear_models(   data = mtcars,   outcome = \"mpg\",   exposure = \"wt\" )  result$tidy #> # A tibble: 2 × 9 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)    37.3     33.5      41.1      1.88  8.24e-19 NA       32  170. #> 2 wt             -5.34    -6.49     -4.20     0.559 1.29e-10 NA       32  170."},{"path":"https://drhealy013.github.io/turtle/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"User-Friendly Pipelines for Data Analysis","text":"Fits linear (lm) mixed effects (lmer) models Covariates Effect modifiers Sensitivity covariates Random effects Tidy model summary Residuals Model formula","code":""},{"path":"https://drhealy013.github.io/turtle/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"User-Friendly Pipelines for Data Analysis","text":"MIT © drhealy013","code":""},{"path":"https://drhealy013.github.io/turtle/reference/run_linear_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Linear or Mixed Effects Model with Optional Modifiers — run_linear_models","title":"Fit a Linear or Mixed Effects Model with Optional Modifiers — run_linear_models","text":"function fits linear model (`lm`) mixed effects model (`lmer`) depending presence random effects. supports interaction terms, sensitivity covariates, returns tidy summary model. Users can choose whether compute p-values mixed models. also supports looping multiple outcomes exposures.","code":""},{"path":"https://drhealy013.github.io/turtle/reference/run_linear_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Linear or Mixed Effects Model with Optional Modifiers — run_linear_models","text":"data dataset containing variables used model. outcome string character vector specifying one outcome variables. exposure string character vector specifying one exposure variables. covariates character vector covariate names adjust . effect_modifier string specifying effect modifier interact exposure. sensitivity_cov character vector sensitivity covariates. random_effects string specifying random effects structure (e.g., \"(1 | group)\"). p_values Logical. TRUE (default), uses lmerTest compute p-values mixed models. FALSE, uses lme4 without p-values.","code":""},{"path":"https://drhealy013.github.io/turtle/reference/run_linear_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Linear or Mixed Effects Model with Optional Modifiers — run_linear_models","text":"list containing model results. multiple outcomes exposures provided, returns named list results.","code":""},{"path":"https://drhealy013.github.io/turtle/reference/run_linear_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Linear or Mixed Effects Model with Optional Modifiers — run_linear_models","text":"","code":"# Examples  data <- mtcars  # 1. Run a single model with one outcome and one exposure run_linear_models(data = data,                   outcome = \"mpg\",                   exposure = \"cyl\") #> $model #>  #> Call: #> (function (formula, data, subset, weights, na.action, method = \"qr\",  #>     model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,  #>     contrasts = NULL, offset, ...)  #> { #>     ret.x <- x #>     ret.y <- y #>     cl <- match.call() #>     mf <- match.call(expand.dots = FALSE) #>     m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",  #>         \"offset\"), names(mf), 0L) #>     mf <- mf[c(1L, m)] #>     mf$drop.unused.levels <- TRUE #>     mf[[1L]] <- quote(stats::model.frame) #>     mf <- eval(mf, parent.frame()) #>     if (method == \"model.frame\")  #>         return(mf) #>     else if (method != \"qr\")  #>         warning(gettextf(\"method = '%s' is not supported. Using 'qr'\",  #>             method), domain = NA) #>     mt <- attr(mf, \"terms\") #>     y <- model.response(mf, \"numeric\") #>     w <- as.vector(model.weights(mf)) #>     if (!is.null(w) && !is.numeric(w))  #>         stop(\"'weights' must be a numeric vector\") #>     offset <- model.offset(mf) #>     mlm <- is.matrix(y) #>     ny <- if (mlm)  #>         nrow(y) #>     else length(y) #>     if (!is.null(offset)) { #>         if (!mlm)  #>             offset <- as.vector(offset) #>         if (NROW(offset) != ny)  #>             stop(gettextf(\"number of offsets is %d, should equal %d (number of observations)\",  #>                 NROW(offset), ny), domain = NA) #>     } #>     if (is.empty.model(mt)) { #>         x <- NULL #>         z <- list(coefficients = if (mlm) matrix(NA_real_, 0,  #>             ncol(y)) else numeric(), residuals = y, fitted.values = 0 *  #>             y, weights = w, rank = 0L, df.residual = if (!is.null(w)) sum(w !=  #>             0) else ny) #>         if (!is.null(offset)) { #>             z$fitted.values <- offset #>             z$residuals <- y - offset #>         } #>     } #>     else { #>         x <- model.matrix(mt, mf, contrasts) #>         z <- if (is.null(w))  #>             lm.fit(x, y, offset = offset, singular.ok = singular.ok,  #>                 ...) #>         else lm.wfit(x, y, w, offset = offset, singular.ok = singular.ok,  #>             ...) #>     } #>     class(z) <- c(if (mlm) \"mlm\", \"lm\") #>     z$na.action <- attr(mf, \"na.action\") #>     z$offset <- offset #>     z$contrasts <- attr(x, \"contrasts\") #>     z$xlevels <- .getXlevels(mt, mf) #>     z$call <- cl #>     z$terms <- mt #>     if (model)  #>         z$model <- mf #>     if (ret.x)  #>         z$x <- x #>     if (ret.y)  #>         z$y <- y #>     if (!qr)  #>         z$qr <- NULL #>     z #> })(formula = .Primitive(\"quote\")(mpg ~ cyl), data = structure(list( #>     mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8,  #>     19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4,  #>     33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,  #>     19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6,  #>     8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6,  #>     8, 4), disp = c(160, 160, 108, 258, 360, 225, 360, 146.7,  #>     140.8, 167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440,  #>     78.7, 75.7, 71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1,  #>     351, 145, 301, 121), hp = c(110, 110, 93, 110, 175, 105,  #>     245, 62, 95, 123, 123, 180, 180, 180, 205, 215, 230, 66,  #>     52, 65, 97, 150, 150, 245, 175, 66, 91, 113, 264, 175, 335,  #>     109), drat = c(3.9, 3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69,  #>     3.92, 3.92, 3.92, 3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08,  #>     4.93, 4.22, 3.7, 2.76, 3.15, 3.73, 3.08, 4.08, 4.43, 3.77,  #>     4.22, 3.62, 3.54, 4.11), wt = c(2.62, 2.875, 2.32, 3.215,  #>     3.44, 3.46, 3.57, 3.19, 3.15, 3.44, 3.44, 4.07, 3.73, 3.78,  #>     5.25, 5.424, 5.345, 2.2, 1.615, 1.835, 2.465, 3.52, 3.435,  #>     3.84, 3.845, 1.935, 2.14, 1.513, 3.17, 2.77, 3.57, 2.78),  #>     qsec = c(16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84,  #>     20, 22.9, 18.3, 18.9, 17.4, 17.6, 18, 17.98, 17.82, 17.42,  #>     19.47, 18.52, 19.9, 20.01, 16.87, 17.3, 15.41, 17.05, 18.9,  #>     16.7, 16.9, 14.5, 15.5, 14.6, 18.6), vs = c(0, 0, 1, 1, 0,  #>     1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1), am = c(1, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1,  #>     1, 1, 1, 1), gear = c(4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3,  #>     3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5,  #>     4), carb = c(4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4,  #>     4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 6, 8, 2)), row.names = c(\"Mazda RX4\",  #> \"Mazda RX4 Wag\", \"Datsun 710\", \"Hornet 4 Drive\", \"Hornet Sportabout\",  #> \"Valiant\", \"Duster 360\", \"Merc 240D\", \"Merc 230\", \"Merc 280\",  #> \"Merc 280C\", \"Merc 450SE\", \"Merc 450SL\", \"Merc 450SLC\", \"Cadillac Fleetwood\",  #> \"Lincoln Continental\", \"Chrysler Imperial\", \"Fiat 128\", \"Honda Civic\",  #> \"Toyota Corolla\", \"Toyota Corona\", \"Dodge Challenger\", \"AMC Javelin\",  #> \"Camaro Z28\", \"Pontiac Firebird\", \"Fiat X1-9\", \"Porsche 914-2\",  #> \"Lotus Europa\", \"Ford Pantera L\", \"Ferrari Dino\", \"Maserati Bora\",  #> \"Volvo 142E\"), class = \"data.frame\")) #>  #> Coefficients: #> (Intercept)          cyl   #>      37.885       -2.876   #>  #>  #> $tidy #> # A tibble: 2 × 9 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)    37.9     33.6      42.1      2.07  8.37e-18 NA       32  174. #> 2 cyl            -2.88    -3.53     -2.22     0.322 6.11e-10 NA       32  174. #>  #> $formula #> mpg ~ cyl #> <environment: 0x56087128c038> #>  #> $residuals #>  [1]  0.3701643  0.3701643 -3.5814159  0.7701643  3.8217446 -2.5298357 #>  [7] -0.5782554 -1.9814159 -3.5814159 -1.4298357 -2.8298357  1.5217446 #> [13]  2.4217446  0.3217446 -4.4782554 -4.4782554 -0.1782554  6.0185841 #> [19]  4.0185841  7.5185841 -4.8814159  0.6217446  0.3217446 -1.5782554 #> [25]  4.3217446  0.9185841 -0.3814159  4.0185841  0.9217446 -0.9298357 #> [31]  0.1217446 -4.9814159 #>  #> $exposure #> [1] \"cyl\" #>  #> attr(,\"class\") #> [1] \"run_model_result\"  # 2. Store the output for a single model model_output <- run_linear_models(data = data,                                   outcome = \"mpg\",                                   exposure = \"cyl\") model_output$tidy  # access tidy results #> # A tibble: 2 × 9 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)    37.9     33.6      42.1      2.07  8.37e-18 NA       32  174. #> 2 cyl            -2.88    -3.53     -2.22     0.322 6.11e-10 NA       32  174.  # 3. Store output for multiple outcomes and exposures multi_output <- run_linear_models(data = data,                                   outcome = c(\"mpg\", \"hp\"),                                   exposure = c(\"cyl\", \"wt\")) multi_output[[\"mpg&cyl\"]]$tidy  # access a specific model's tidy results #> NULL  # 4. Use named vectors for outcomes and exposures outcomes <- c(\"mpg\", \"hp\") names(outcomes) <- outcomes exposures <- c(\"cyl\", \"wt\") names(exposures) <- exposures named_output <- run_linear_models(data = data,                                   outcome = outcomes,                                   exposure = exposures) named_output[[\"hp&wt\"]]$tidy #> NULL  # 5. Include covariates directly covar_output <- run_linear_models(data = data,                                   outcome = \"mpg\",                                   exposure = \"cyl\",                                   covariates = c(\"wt\", \"hp\")) covar_output$tidy #> # A tibble: 4 × 9 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)  38.8     35.1     42.4        1.79   4.80e-19 NA       32  163. #> 2 wt           -3.17    -4.68    -1.65       0.741  1.99e- 4 NA       32  163. #> 3 hp           -0.0180  -0.0424   0.00629    0.0119 1.40e- 1 NA       32  163. #> 4 cyl          -0.942   -2.07     0.187      0.551  9.85e- 2 NA       32  163.  # 6. Include covariates using a named vector covars <- c(\"wt\", \"hp\") names(covars) <- covars named_covar_output <- run_linear_models(data = data,                                         outcome = \"mpg\",                                         exposure = \"cyl\",                                         covariates = covars) named_covar_output$tidy #> # A tibble: 4 × 9 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)  38.8     35.1     42.4        1.79   4.80e-19 NA       32  163. #> 2 wt           -3.17    -4.68    -1.65       0.741  1.99e- 4 NA       32  163. #> 3 hp           -0.0180  -0.0424   0.00629    0.0119 1.40e- 1 NA       32  163. #> 4 cyl          -0.942   -2.07     0.187      0.551  9.85e- 2 NA       32  163.  # 7. Include an effect modifier (e.g., interaction term) interaction_output <- run_linear_models(data = data,                                         outcome = \"mpg\",                                         exposure = \"cyl\",                                         effect_modifier = \"am\") interaction_output$tidy #> # A tibble: 4 × 10 #>   term        estimate conf.low conf.high std.error  p.value error n_obs   BIC #>   <chr>          <dbl>    <dbl>     <dbl>     <dbl>    <dbl> <lgl> <int> <dbl> #> 1 (Intercept)    30.9     24.3     37.4       3.19  1.95e-10 NA       32  173. #> 2 cyl            -1.98    -2.89    -1.06      0.449 1.41e- 4 NA       32  173. #> 3 am             10.2      1.36    19.0       4.30  2.53e- 2 NA       32  173. #> 4 cyl:am         -1.31    -2.75     0.143     0.707 7.55e- 2 NA       32  173. #> # ℹ 1 more variable: modifier <chr>"},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"turtle-development-version","dir":"Changelog","previous_headings":"","what":"turtle (development version)","title":"turtle (development version)","text":"Initial CRAN submission.","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial release","title":"turtle 0.1.0","text":"Introduced run_linear_models() function fit linear (lm) mixed effects (lmer) models. Covariate adjustment Effect modification via interaction terms Sensitivity covariates Random effects specification fitted model object tidy summary fixed effects estimates, confidence intervals, standard errors, p-values, number observations, BIC Model formula Residuals Exposure variable name Includes robust error warning handling using purrr::safely() withCallingHandlers(). Includes errors warnings tidy output can viewed later interpreting results.","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"update-runlinearmodels-0-1-1","dir":"Changelog","previous_headings":"","what":"Update runLinearModels","title":"turtle 0.1.1","text":"*Ask clarification user submits interaction exposure, additionally adds effect-modifier, confirm user wants pursue 3-way interactions. - Robust interactive non-interactive use","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"update-runlinearmodels-0-1-2","dir":"Changelog","previous_headings":"","what":"Update runLinearModels","title":"turtle 0.1.2","text":"Added version check run_linear_models() user knows update needed . Added option include p-values, switch using lme4 run mixed-effect models.","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"bugfix-0-1-3","dir":"Changelog","previous_headings":"","what":"BugFix","title":"turtle 0.1.3","text":"*Fixed bug tidy output optionally select p-values based whether exists output.","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"update-runlinearmodels-0-1-4","dir":"Changelog","previous_headings":"","what":"Update runLinearModels","title":"turtle 0.1.4","text":"*Added functionality either single e.g., outcome exposure can provided, else vector e.g., outcomes exposures. list provided, loops possible combinations exposures outcomes.","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"create-print_methods_run_linear_models-0-1-5","dir":"Changelog","previous_headings":"","what":"Create print_methods_run_linear_models","title":"turtle 0.1.5","text":"*Make custom printing function run_linear_models function provide feedback users familiar data analysis","code":""},{"path":[]},{"path":"https://drhealy013.github.io/turtle/news/index.html","id":"create-model_helpers--utils-0-1-6","dir":"Changelog","previous_headings":"","what":"Create model_helpers & utils","title":"turtle 0.1.6","text":"Create model_helpers script -Turn repetitive code run_linear_models helpers can easily updated utilised elsewhere Create utils script -Turn repetitive code run_linear_models utils can easily updated utilised elsewhere *Update run_linear_models -Remove model_helpers utils instead call separate files.","code":""}]
